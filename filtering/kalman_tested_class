import numpy as np
import time

class KalmanFilter:
    def __init__(self, robot_length=110, speed_variance=97.5):
        self.X = np.array([0, 0, 0], dtype=float)  # state --> [X, Y, theta]
        self.U = np.array([0, 0], dtype=float)  # control input [left speed, right speed]
        self.P = np.eye(3) * 1  # covariance matrix
        self.Z = np.array([0, 0, 0], dtype=float)  # measurement
        self.robot_length = robot_length
        self.speed_variance = speed_variance
        self.previous_t = None  # to track previous time

    def prediction_step(self, dt=0.2):
        """
        Prediction step of the Kalman Filter.
        """
        current_t = time.time()
        
        if self.previous_t:
            dt = round(current_t - self.previous_t, 2)
            if dt < 0.2:
                time.sleep(0.2 - dt)

        theta = self.X[2]
        A = np.eye(len(self.X))
        
        # Control matrix B
        B = np.array([[0.5 * dt * np.cos(theta), 0.5 * dt * np.cos(theta)],
                      [0.5 * dt * np.sin(theta), 0.5 * dt * np.sin(theta)],
                      [-dt / self.robot_length, dt / self.robot_length]])
        
        # State prediction
        x_new = A.dot(self.X) + B.dot(self.U)
        
        # Process noise covariance
        Q = np.eye(len(self.U)) * self.speed_variance
        self.P += B.dot(Q).dot(B.T)
        
        self.previous_t = current_t
        
        return x_new, self.P, current_t

    def update_step(self, Z, aruco_detected):
        """
        Update step of the Kalman Filter.
        """
        R = np.diag([0.6988, 0.1634, 0.08])  # Measurement noise covariance
        I = Z - self.X
        H = np.eye(len(self.X))

        if aruco_detected:
            S = H.dot(self.P).dot(H.T) + R
        else:
            R_nt = R * 10000  # Large uncertainty when ArUco marker is not detected
            S = H.dot(self.P).dot(H.T) + R_nt

        # Kalman gain
        K_gain = self.P.dot(H.T).dot(np.linalg.inv(S))

        # State update
        self.X = self.X + K_gain.dot(I)
        self.P = self.P - K_gain.dot(H).dot(self.P)
        
        return self.X, self.P

    def kalman_filter(self, aruco_detected, U, Z):
        """
        Complete Kalman Filter process combining prediction and update steps.
        """
        self.U = U  # Control input
        
        # Prediction step
        X_predicted, P_predicted, next_t = self.prediction_step()

        # Update step
        X_updated, P_updated = self.update_step(Z, aruco_detected)

        # Return results
        return next_t, X_updated, P_updated, X_predicted



kf = KalmanFilter(robot_length=robot_length, speed_variance=speed_variance)

# Initial state x, control input u, measurement z, and covariance matrix P
x = np.array([0, 0, 0], dtype=float)  # Initial state [x, y, theta]
u = np.array([2, -2], dtype=float)  # Control input [left speed, right speed]
P = np.eye(3)  # Initial covariance matrix (identity matrix)
z = np.array([0, 0, 0], dtype=float)  # Initial measurement

# Start testing loop with 10 iterations
next_time = 0  # Initial time step
for i in range(10):
    # Update measurement z for each iteration
    z = np.array([2*i, i, i/10], dtype=float)  # Example measurement [x, y, theta]
    
    # Call the kalman_filter method
    next_time, x_updated, P_updated, x_predicted = kf.kalman_filter(False, u, z)
    
    # Sleep for a second to simulate real-time processing
    time.sleep(1)
    
    # Print the current iteration, updated state and predicted state
    print(f"Iteration {i}:")
    print("Updated state:", np.round(x_updated, 2))
    print("Predicted state:", np.round(x_predicted, 2))
    print("-" * 30)
